{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1550650438618},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1550650438619},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1550650438619},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1550650438619},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1550650438619},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1550650438627},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1550650438619},{"_id":"source/_posts/first.md","hash":"31f560064c8ac39822e40ce18a355394f7ec4069","modified":1550650438618},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1550650438619},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1550650438620},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1550650438620},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1550650438620},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1550650438620},{"_id":"source/_posts/aotudeploy.md","hash":"30bda030f9def35d8c032c32df14ec8c713b4c1b","modified":1550820048461},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1550650438621},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1550650438621},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1550650438621},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1550650438621},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1550650438621},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1550650438621},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1550650438626},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1550650438626},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1550650438626},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1550650438626},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1550650438627},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1550650438626},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1550650438627},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1550650438626},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1550650438622},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"b8e044ac56ccfcd6bc849229cd1ff04370074f7c","modified":1550817566664},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"5b2a6949d751bee75efc9c7bdab111a0161b1f99","modified":1550820030527},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1550650438622},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1550818709503},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1550650438623},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"11156666f0be4f2556d54232efd183508dfa94a6","modified":1550817547949},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1550650438623},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1550650438623},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1550650438625},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1550650438625},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1550650438623},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1550650438625},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1550650438625},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1550650438625},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1550650438626},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1550650438627},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1550650438629},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1550650438636},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1550650438637},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1550650438637},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1550650438637},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1550650438637},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1550650438638},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1550650438638},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1550650438639},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1550650438639},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1550650438639},{"_id":"themes/landscape/source/js/script.js","hash":"4b5285fff5ae991e82803a28c437528fdc394910","modified":1550823200688},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1550650438624},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1550650438624},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1550650438624},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1550650438624},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1550650438624},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1550650438625},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1550650438627},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1550650438628},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"2f2387ece013ae8b2736e1c4df37e45eeccb2723","modified":1550755059172},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1550650438628},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1550650438628},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1550650438628},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1550650438628},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1550650438628},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1550650438628},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1550650438629},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1550650438630},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1550650438631},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1550650438634},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1550650438629},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1550650438629},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1550650438638},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1550650438638},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1550650438638},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1550650438638},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1550650438638},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1550650438639},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1550650438633},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1550650438632},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1550650438636}],"Category":[{"name":"test","_id":"cjsfpe86700022a87vtxn166h"},{"name":"自动化工具","_id":"cjsfpe86a00042a87oi5c95i2"}],"Data":[],"Page":[],"Post":[{"title":"我的第一篇博客","_content":"欢迎来踩踩\n\n## 前言\n\n### hey 这是我的第一篇测试博客 Yeah","source":"_posts/first.md","raw":"---\ntitle: 我的第一篇博客\n# date: 2019-02-19 20:33:26      #用命令会自动生成，也可以自己写，所以文章时间可以改\ncategories: test         #文章的分类，这个可以自己定义\ntags: [test,博客]        #tag，为文章添加标签，方便搜索\n---\n欢迎来踩踩\n\n## 前言\n\n### hey 这是我的第一篇测试博客 Yeah","slug":"first","published":1,"date":"2019-02-20T08:13:58.617Z","updated":"2019-02-20T08:13:58.618Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfpe86100002a87h4kcmlv4","content":"<p>欢迎来踩踩</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><h3 id=\"hey-这是我的第一篇测试博客-Yeah\"><a href=\"#hey-这是我的第一篇测试博客-Yeah\" class=\"headerlink\" title=\"hey 这是我的第一篇测试博客 Yeah\"></a>hey 这是我的第一篇测试博客 Yeah</h3>","site":{"data":{}},"excerpt":"","more":"<p>欢迎来踩踩</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><h3 id=\"hey-这是我的第一篇测试博客-Yeah\"><a href=\"#hey-这是我的第一篇测试博客-Yeah\" class=\"headerlink\" title=\"hey 这是我的第一篇测试博客 Yeah\"></a>hey 这是我的第一篇测试博客 Yeah</h3>"},{"title":"一个简易的前端自动化构建例子","_content":"\n## 写在前面\n\n前阵子一直在赶项目，写需求，沉淀的东西大多是跟业务相关。团队写需求时一般使用 athena + gitlab CI 自动化生成模板，自动化检测代码格式，自动化打包和自动化部署到服务器，全自动一条龙服务。这对于之前都是单枪匹马的我来说，是套极具诱惑力的流程工具。\b趁着现在没什么需求，我便借着搭建博客的例子来学习如何搭建简易版的自动化构建工具。同时\b搭建好的博客也更督促了自己 2019 年多点沉淀，多点输出，多发博客。\n\n<!-- more -->\n\n## 从哪里入手\n\n作为一个简单的示例，示例所要\b实现的核心功能是 -- 当把代码 push 到 github 远程仓库时，自动打包代码并将部署到服务器生成博客。\n1. 申请服务器，寻找博客代码的承载体。\n    我们新建好一个 github \b远程仓库，并将代码托管到仓库的 gh-pages 分支，之后 github 就会帮我们生成静态网页了。因此我们可以省下申请服务器，申请域名，解析域名，搭建服务器等一系列操作了。这也是为了简化我们的操作，毕竟我们的重心是自动化构建流程。\n2. 利用 hexo 搭建好博客框架\n3. 添加 Travis CI 增加自动化打包和部署功能\n\n## 实操流程\n\n### 1. 安装 hexo-cli\n\n`npm install -g hexo-cli`\n\n### 2. 安装完成后，执行以下命令，hexo 将会在指定文件夹中新建所需要的文件\n\n```shell\n    hexo init <folder>\n    cd <folder>\n    git init\n    git remote add <仓库地址>\n    npm install\n```\n\n### 3. 新建完成后，指定文件夹的目录如下：\n\n```tree\n    ├── _config.yml\n    ├── package.json\n    ├── scaffolds\n    ├── source\n    |   └── _posts\n    └── themes\n```\n\n### 4. 配置\n\n这里要注意的是 url 处，需要填上生成博客的地址，我的是 https://cssie.github.io/cssieblog ，如果是二级地址，在下面的 root 选项处需要填上 /cssieblog/ 。一般情况下，生成博客的地址可以从这个项目的远程仓库地址\b获\b得。\n\n 例如：\n\n 我的项目地址：https://github.com/cssie/cssieblog.git\n 对应的博客地址：https://cssie.github.io/cssieblog\n\n *生成的博客地址可以在\b此处查找到：github 远程仓库 >> Settings >> GitHub Pages*\n\n```yml\n    # URL\n    ## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\n    url: https://cssie.github.io/cssieblog\n    root: /cssieblog/\n    permalink: :year/:month/:day/:title/\n    permalink_defaults:\n    ...\n    ...\n    ## 部\b署博客，在 repo 处填写好远程仓库地址，并将 branch 设置成 gh-pages\b 表示代码将发布到此分支上。\n    deploy:\n    type: git\n    repo: https://github.com/cssie/cssieblog.git\n    branch: gh-pages #published\n    message:\n```\n\n### 5. 试运行\n\n常用的 hexo 命令行\n\n```shell\n    Usage: hexo <command>\n\n    Commands:\n    clean     清除打包文件\b和缓存\n    deploy    部署\n    generate  打包静态资源\n    init      创建一个新的 hexo 文件夹\n```\n\n接下来我们执行以下命令进行打包\n\n`hexo g / hexo generate`\n\n这个过程中有可能会报错，提示某个插件没有安装,如下\n\n`ERROR Plugin load failed: hexo-renderer-marked`\n\n解决方法：执行以下命令查看哪些插件没有安装成功，之后逐一安装缺失的包即可\n\n`npm ls --depth 0`\n`npm install hexo-renderer-marked --save`\n\n打包之后\b在发布前，我们需要先安装 hexo-deployer-git, 并确保在 _config.yml 中 deploy 的设置为 type: git\n\n```js\nnpm install hexo-deployer-git --save\n...\nhexo d / hexo deploy\n```\n\n至此，搭建服务器就已经大功告成啦。当然，别忘了去远程仓库查看 gh-pages 分支是否已更新代码了。\n![结果图](https://img14.360buyimg.com/ling/jfs/t1/18594/12/7856/275573/5c6e5d03E9e72a835/7833011da0df6d83.jpg)\n\n### 6. 添加自动化部署功能\n\n\b跟到这一步的小伙伴可能很困惑。远程仓库的 master 主支竟然是空的！其实上面几步我们只是把代码部署到远程仓库的 gh-pages 分支上，并没有\b\b上传主要代码到 master 哦。那自然而然的一种想法是：那我把主代码再 push 一次到 master 就好了。但这样子每次更新本地代码后，都需要俩个步骤：1，hexo deploy \b将打包好的代码部署到 gh-pages；2，git 提交源代码到 master。\n那可不可以把这俩步\b合并一下呢？答案是\b\b可以的。\n\n#### 添加 Travis CI \b持续集成服务\n\n> Travis CI 提供的是持续集成服务（Continuous Integration，简称 CI）。它绑定 Github 上面的项目，只要有新的代码，就会自动抓取。然后，提供一个运行环境，执行测试，完成构建，还能部署到服务器。\n持续集成的好处在于，每次代码的小幅变更，就能看到运行结果，从而不断累积小的变更，而不是在开发周期结束时，一下子合并一大块代码。\n\n1. 访问 [Travis CI 官网](https://travis-ci.org/)，使用 Github 账户登入 Travis CI，点击右上角的个人头像 >> settting。Travis 会列出 Github 上面你的所有仓库，以及你所属于的组织。此时，选择你需要 Travis 帮你构建的仓库，打开仓库旁边的开关。一旦激活了一个仓库，Travis 会监听这个仓库的所有变化。\n2. github 和 Travis 配置\n\n- 进入 [github](https://github.com/) 首页，点击右上角头像 >> settings >> Developer settings >> Personal access tokens >> 点击 \bGenerate new token 按钮 >> 点击全选 repo选项和 user 选项 >> 点击 Generate token 按钮以生成 Travis 需要的 access token。\n***注意：复制下生成的token（只允许看见一次），在Travis那边可以使用***\n- 进入 [Travis CI 官网](https://travis-ci.org/),点击 激活仓库开关 右边的 settings，在 Environment Variables 选项中添加一个变量 HEXO_TOKEN，并将刚刚\b复制的 token 填进去，点击 add 按钮。\n到此 github 和 Travis 的配置就\b ok 了。\n\n3. 在项目根目录下，创建\b配置文件，并命名为 <font color=ff0000>.travis.yml</font>。一旦代码仓库有新的 Commit，Travis 就会去找这个文件，执行里面的命令。\n\n4. .travis.yml 文件配置\n\n```yml\n    language: node_js\n    node_js: stable\n    cache:\n    directories:\n    - node_modules\n    install:\n    - npm install\n    script:\n    - hexo clean\n    - hexo g\n    after_script:\n    - git clone https://${GH_REF} .deploy_git\n    - cd .deploy_git\n    - git checkout gh-pages\n    - cd ../\n    - mv .deploy_git/.git/ ./public/\n    - cd ./public\n    - git config user.name \"cssie\"\n    - git config user.email <youremail>\n    - git add .\n    - git commit -m \"Travis CI Auto Builder at `date +\"%Y-%m-%d %H:%M\"`\"\n    - git push --force --quiet \"https://${HEXO_TOKEN}@${GH_REF}\"\n    branches:\n    only:\n    - master\n    env:\n    global:\n    - GH_REF: github.com/cssie/cssieblog.git\n    notifications:\n    email:\n    - <youremail>\n    on_success: change\n    on_failure: always\n```\n\n5. git 提交文件到 github 上\b，在 Travis CI 官网\b左边处点击项目，看到以下截图，就说明 Travis CI 已正常运行。这时只要刷新博客地址：https://cssie.github.io/cssieblog/ 即可看到页面内容已刷新（一般会有点延迟时间），同时到远程仓库地址 https://github.com/cssie/cssieblog.git 处可以看到 master 和 gh-pages 均已更新代码。\n![成功截图](https://img10.360buyimg.com/ling/jfs/t1/7239/38/15203/462920/5c6e693fE4f4a4ad0/8637f24a392cd503.jpg)\n\n## 拓展\n\n到这里我们已经完成了一开始的诉求，然而这还远远只是一个开头。通过这个例子我们还可以去拓展很多，譬如如果我们想把博客搭建在自己的服务器上，我们应该如何去配置 Travis ，让其在部署的时候，同时部署到 gh-pages 和自己的服务器。再如目前博客是没有评论功能的，如何去添加评论功能。又如或许我们\b可以在\b打包代码前先检测下代码格式是否正确等等。\n\n## \b\b参考文章\n\n[Hexo 官方文档](https://hexo.io/zh-cn/docs/)\n[持续集成服务 Travis CI 教程](http://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html)\n[Travis CI 持续部署Hexo博客到GitHub Page和VPS服务器](http://www.yanglangjing.com/2018/08/28/travis_ci_auto_deploy_hexo_to_vps/)\n[搭建一个免费的，无限流量的Blog----github Pages和Jekyll入门](http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html)\n\n<div id=\"gitalk-container\"></div>","source":"_posts/aotudeploy.md","raw":"---\ntitle: 一个简易的前端自动化构建例子\n# date: 2019-02-19 20:33:26      #用命令会自动生成，也可以自己写，所以文章时间可以改\ncategories: 自动化工具         #文章的分类，这个可以自己定义\ntags: [前端,自动化构建]        #tag，为文章添加标签，方便搜索\n---\n\n## 写在前面\n\n前阵子一直在赶项目，写需求，沉淀的东西大多是跟业务相关。团队写需求时一般使用 athena + gitlab CI 自动化生成模板，自动化检测代码格式，自动化打包和自动化部署到服务器，全自动一条龙服务。这对于之前都是单枪匹马的我来说，是套极具诱惑力的流程工具。\b趁着现在没什么需求，我便借着搭建博客的例子来学习如何搭建简易版的自动化构建工具。同时\b搭建好的博客也更督促了自己 2019 年多点沉淀，多点输出，多发博客。\n\n<!-- more -->\n\n## 从哪里入手\n\n作为一个简单的示例，示例所要\b实现的核心功能是 -- 当把代码 push 到 github 远程仓库时，自动打包代码并将部署到服务器生成博客。\n1. 申请服务器，寻找博客代码的承载体。\n    我们新建好一个 github \b远程仓库，并将代码托管到仓库的 gh-pages 分支，之后 github 就会帮我们生成静态网页了。因此我们可以省下申请服务器，申请域名，解析域名，搭建服务器等一系列操作了。这也是为了简化我们的操作，毕竟我们的重心是自动化构建流程。\n2. 利用 hexo 搭建好博客框架\n3. 添加 Travis CI 增加自动化打包和部署功能\n\n## 实操流程\n\n### 1. 安装 hexo-cli\n\n`npm install -g hexo-cli`\n\n### 2. 安装完成后，执行以下命令，hexo 将会在指定文件夹中新建所需要的文件\n\n```shell\n    hexo init <folder>\n    cd <folder>\n    git init\n    git remote add <仓库地址>\n    npm install\n```\n\n### 3. 新建完成后，指定文件夹的目录如下：\n\n```tree\n    ├── _config.yml\n    ├── package.json\n    ├── scaffolds\n    ├── source\n    |   └── _posts\n    └── themes\n```\n\n### 4. 配置\n\n这里要注意的是 url 处，需要填上生成博客的地址，我的是 https://cssie.github.io/cssieblog ，如果是二级地址，在下面的 root 选项处需要填上 /cssieblog/ 。一般情况下，生成博客的地址可以从这个项目的远程仓库地址\b获\b得。\n\n 例如：\n\n 我的项目地址：https://github.com/cssie/cssieblog.git\n 对应的博客地址：https://cssie.github.io/cssieblog\n\n *生成的博客地址可以在\b此处查找到：github 远程仓库 >> Settings >> GitHub Pages*\n\n```yml\n    # URL\n    ## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\n    url: https://cssie.github.io/cssieblog\n    root: /cssieblog/\n    permalink: :year/:month/:day/:title/\n    permalink_defaults:\n    ...\n    ...\n    ## 部\b署博客，在 repo 处填写好远程仓库地址，并将 branch 设置成 gh-pages\b 表示代码将发布到此分支上。\n    deploy:\n    type: git\n    repo: https://github.com/cssie/cssieblog.git\n    branch: gh-pages #published\n    message:\n```\n\n### 5. 试运行\n\n常用的 hexo 命令行\n\n```shell\n    Usage: hexo <command>\n\n    Commands:\n    clean     清除打包文件\b和缓存\n    deploy    部署\n    generate  打包静态资源\n    init      创建一个新的 hexo 文件夹\n```\n\n接下来我们执行以下命令进行打包\n\n`hexo g / hexo generate`\n\n这个过程中有可能会报错，提示某个插件没有安装,如下\n\n`ERROR Plugin load failed: hexo-renderer-marked`\n\n解决方法：执行以下命令查看哪些插件没有安装成功，之后逐一安装缺失的包即可\n\n`npm ls --depth 0`\n`npm install hexo-renderer-marked --save`\n\n打包之后\b在发布前，我们需要先安装 hexo-deployer-git, 并确保在 _config.yml 中 deploy 的设置为 type: git\n\n```js\nnpm install hexo-deployer-git --save\n...\nhexo d / hexo deploy\n```\n\n至此，搭建服务器就已经大功告成啦。当然，别忘了去远程仓库查看 gh-pages 分支是否已更新代码了。\n![结果图](https://img14.360buyimg.com/ling/jfs/t1/18594/12/7856/275573/5c6e5d03E9e72a835/7833011da0df6d83.jpg)\n\n### 6. 添加自动化部署功能\n\n\b跟到这一步的小伙伴可能很困惑。远程仓库的 master 主支竟然是空的！其实上面几步我们只是把代码部署到远程仓库的 gh-pages 分支上，并没有\b\b上传主要代码到 master 哦。那自然而然的一种想法是：那我把主代码再 push 一次到 master 就好了。但这样子每次更新本地代码后，都需要俩个步骤：1，hexo deploy \b将打包好的代码部署到 gh-pages；2，git 提交源代码到 master。\n那可不可以把这俩步\b合并一下呢？答案是\b\b可以的。\n\n#### 添加 Travis CI \b持续集成服务\n\n> Travis CI 提供的是持续集成服务（Continuous Integration，简称 CI）。它绑定 Github 上面的项目，只要有新的代码，就会自动抓取。然后，提供一个运行环境，执行测试，完成构建，还能部署到服务器。\n持续集成的好处在于，每次代码的小幅变更，就能看到运行结果，从而不断累积小的变更，而不是在开发周期结束时，一下子合并一大块代码。\n\n1. 访问 [Travis CI 官网](https://travis-ci.org/)，使用 Github 账户登入 Travis CI，点击右上角的个人头像 >> settting。Travis 会列出 Github 上面你的所有仓库，以及你所属于的组织。此时，选择你需要 Travis 帮你构建的仓库，打开仓库旁边的开关。一旦激活了一个仓库，Travis 会监听这个仓库的所有变化。\n2. github 和 Travis 配置\n\n- 进入 [github](https://github.com/) 首页，点击右上角头像 >> settings >> Developer settings >> Personal access tokens >> 点击 \bGenerate new token 按钮 >> 点击全选 repo选项和 user 选项 >> 点击 Generate token 按钮以生成 Travis 需要的 access token。\n***注意：复制下生成的token（只允许看见一次），在Travis那边可以使用***\n- 进入 [Travis CI 官网](https://travis-ci.org/),点击 激活仓库开关 右边的 settings，在 Environment Variables 选项中添加一个变量 HEXO_TOKEN，并将刚刚\b复制的 token 填进去，点击 add 按钮。\n到此 github 和 Travis 的配置就\b ok 了。\n\n3. 在项目根目录下，创建\b配置文件，并命名为 <font color=ff0000>.travis.yml</font>。一旦代码仓库有新的 Commit，Travis 就会去找这个文件，执行里面的命令。\n\n4. .travis.yml 文件配置\n\n```yml\n    language: node_js\n    node_js: stable\n    cache:\n    directories:\n    - node_modules\n    install:\n    - npm install\n    script:\n    - hexo clean\n    - hexo g\n    after_script:\n    - git clone https://${GH_REF} .deploy_git\n    - cd .deploy_git\n    - git checkout gh-pages\n    - cd ../\n    - mv .deploy_git/.git/ ./public/\n    - cd ./public\n    - git config user.name \"cssie\"\n    - git config user.email <youremail>\n    - git add .\n    - git commit -m \"Travis CI Auto Builder at `date +\"%Y-%m-%d %H:%M\"`\"\n    - git push --force --quiet \"https://${HEXO_TOKEN}@${GH_REF}\"\n    branches:\n    only:\n    - master\n    env:\n    global:\n    - GH_REF: github.com/cssie/cssieblog.git\n    notifications:\n    email:\n    - <youremail>\n    on_success: change\n    on_failure: always\n```\n\n5. git 提交文件到 github 上\b，在 Travis CI 官网\b左边处点击项目，看到以下截图，就说明 Travis CI 已正常运行。这时只要刷新博客地址：https://cssie.github.io/cssieblog/ 即可看到页面内容已刷新（一般会有点延迟时间），同时到远程仓库地址 https://github.com/cssie/cssieblog.git 处可以看到 master 和 gh-pages 均已更新代码。\n![成功截图](https://img10.360buyimg.com/ling/jfs/t1/7239/38/15203/462920/5c6e693fE4f4a4ad0/8637f24a392cd503.jpg)\n\n## 拓展\n\n到这里我们已经完成了一开始的诉求，然而这还远远只是一个开头。通过这个例子我们还可以去拓展很多，譬如如果我们想把博客搭建在自己的服务器上，我们应该如何去配置 Travis ，让其在部署的时候，同时部署到 gh-pages 和自己的服务器。再如目前博客是没有评论功能的，如何去添加评论功能。又如或许我们\b可以在\b打包代码前先检测下代码格式是否正确等等。\n\n## \b\b参考文章\n\n[Hexo 官方文档](https://hexo.io/zh-cn/docs/)\n[持续集成服务 Travis CI 教程](http://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html)\n[Travis CI 持续部署Hexo博客到GitHub Page和VPS服务器](http://www.yanglangjing.com/2018/08/28/travis_ci_auto_deploy_hexo_to_vps/)\n[搭建一个免费的，无限流量的Blog----github Pages和Jekyll入门](http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html)\n\n<div id=\"gitalk-container\"></div>","slug":"aotudeploy","published":1,"date":"2019-02-20T09:42:40.617Z","updated":"2019-02-22T07:20:48.461Z","_id":"cjsfpe86500012a870jek9ofc","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>前阵子一直在赶项目，写需求，沉淀的东西大多是跟业务相关。团队写需求时一般使用 athena + gitlab CI 自动化生成模板，自动化检测代码格式，自动化打包和自动化部署到服务器，全自动一条龙服务。这对于之前都是单枪匹马的我来说，是套极具诱惑力的流程工具。\b趁着现在没什么需求，我便借着搭建博客的例子来学习如何搭建简易版的自动化构建工具。同时\b搭建好的博客也更督促了自己 2019 年多点沉淀，多点输出，多发博客。</p>\n<a id=\"more\"></a>\n<h2 id=\"从哪里入手\"><a href=\"#从哪里入手\" class=\"headerlink\" title=\"从哪里入手\"></a>从哪里入手</h2><p>作为一个简单的示例，示例所要\b实现的核心功能是 – 当把代码 push 到 github 远程仓库时，自动打包代码并将部署到服务器生成博客。</p>\n<ol>\n<li>申请服务器，寻找博客代码的承载体。<br> 我们新建好一个 github \b远程仓库，并将代码托管到仓库的 gh-pages 分支，之后 github 就会帮我们生成静态网页了。因此我们可以省下申请服务器，申请域名，解析域名，搭建服务器等一系列操作了。这也是为了简化我们的操作，毕竟我们的重心是自动化构建流程。</li>\n<li>利用 hexo 搭建好博客框架</li>\n<li>添加 Travis CI 增加自动化打包和部署功能</li>\n</ol>\n<h2 id=\"实操流程\"><a href=\"#实操流程\" class=\"headerlink\" title=\"实操流程\"></a>实操流程</h2><h3 id=\"1-安装-hexo-cli\"><a href=\"#1-安装-hexo-cli\" class=\"headerlink\" title=\"1. 安装 hexo-cli\"></a>1. 安装 hexo-cli</h3><p><code>npm install -g hexo-cli</code></p>\n<h3 id=\"2-安装完成后，执行以下命令，hexo-将会在指定文件夹中新建所需要的文件\"><a href=\"#2-安装完成后，执行以下命令，hexo-将会在指定文件夹中新建所需要的文件\" class=\"headerlink\" title=\"2. 安装完成后，执行以下命令，hexo 将会在指定文件夹中新建所需要的文件\"></a>2. 安装完成后，执行以下命令，hexo 将会在指定文件夹中新建所需要的文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init &lt;folder&gt;</span><br><span class=\"line\">cd &lt;folder&gt;</span><br><span class=\"line\">git init</span><br><span class=\"line\">git remote add &lt;仓库地址&gt;</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-新建完成后，指定文件夹的目录如下：\"><a href=\"#3-新建完成后，指定文件夹的目录如下：\" class=\"headerlink\" title=\"3. 新建完成后，指定文件夹的目录如下：\"></a>3. 新建完成后，指定文件夹的目录如下：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── _config.yml</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds</span><br><span class=\"line\">├── source</span><br><span class=\"line\">|   └── _posts</span><br><span class=\"line\">└── themes</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-配置\"><a href=\"#4-配置\" class=\"headerlink\" title=\"4. 配置\"></a>4. 配置</h3><p>这里要注意的是 url 处，需要填上生成博客的地址，我的是 <a href=\"https://cssie.github.io/cssieblog\">https://cssie.github.io/cssieblog</a> ，如果是二级地址，在下面的 root 选项处需要填上 /cssieblog/ 。一般情况下，生成博客的地址可以从这个项目的远程仓库地址\b获\b得。</p>\n<p> 例如：</p>\n<p> 我的项目地址：<a href=\"https://github.com/cssie/cssieblog.git\" target=\"_blank\" rel=\"noopener\">https://github.com/cssie/cssieblog.git</a><br> 对应的博客地址：<a href=\"https://cssie.github.io/cssieblog\">https://cssie.github.io/cssieblog</a></p>\n<p> <em>生成的博客地址可以在\b此处查找到：github 远程仓库 &gt;&gt; Settings &gt;&gt; GitHub Pages</em></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># URL</span></span><br><span class=\"line\"><span class=\"comment\">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"attr\">https://cssie.github.io/cssieblog</span></span><br><span class=\"line\"><span class=\"attr\">root:</span> <span class=\"string\">/cssieblog/</span></span><br><span class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">:year/:month/:day/:title/</span></span><br><span class=\"line\"><span class=\"attr\">permalink_defaults:</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"comment\">## 部\b署博客，在 repo 处填写好远程仓库地址，并将 branch 设置成 gh-pages\b 表示代码将发布到此分支上。</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\"><span class=\"attr\">repo:</span> <span class=\"attr\">https://github.com/cssie/cssieblog.git</span></span><br><span class=\"line\"><span class=\"attr\">branch:</span> <span class=\"string\">gh-pages</span> <span class=\"comment\">#published</span></span><br><span class=\"line\"><span class=\"attr\">message:</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5-试运行\"><a href=\"#5-试运行\" class=\"headerlink\" title=\"5. 试运行\"></a>5. 试运行</h3><p>常用的 hexo 命令行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage: hexo &lt;command&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Commands:</span><br><span class=\"line\">clean     清除打包文件\b和缓存</span><br><span class=\"line\">deploy    部署</span><br><span class=\"line\">generate  打包静态资源</span><br><span class=\"line\">init      创建一个新的 hexo 文件夹</span><br></pre></td></tr></table></figure>\n<p>接下来我们执行以下命令进行打包</p>\n<p><code>hexo g / hexo generate</code></p>\n<p>这个过程中有可能会报错，提示某个插件没有安装,如下</p>\n<p><code>ERROR Plugin load failed: hexo-renderer-marked</code></p>\n<p>解决方法：执行以下命令查看哪些插件没有安装成功，之后逐一安装缺失的包即可</p>\n<p><code>npm ls --depth 0</code><br><code>npm install hexo-renderer-marked --save</code></p>\n<p>打包之后\b在发布前，我们需要先安装 hexo-deployer-git, 并确保在 _config.yml 中 deploy 的设置为 type: git</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br><span class=\"line\">...</span><br><span class=\"line\">hexo d / hexo deploy</span><br></pre></td></tr></table></figure>\n<p>至此，搭建服务器就已经大功告成啦。当然，别忘了去远程仓库查看 gh-pages 分支是否已更新代码了。<br><img src=\"https://img14.360buyimg.com/ling/jfs/t1/18594/12/7856/275573/5c6e5d03E9e72a835/7833011da0df6d83.jpg\" alt=\"结果图\"></p>\n<h3 id=\"6-添加自动化部署功能\"><a href=\"#6-添加自动化部署功能\" class=\"headerlink\" title=\"6. 添加自动化部署功能\"></a>6. 添加自动化部署功能</h3><p>\b跟到这一步的小伙伴可能很困惑。远程仓库的 master 主支竟然是空的！其实上面几步我们只是把代码部署到远程仓库的 gh-pages 分支上，并没有\b\b上传主要代码到 master 哦。那自然而然的一种想法是：那我把主代码再 push 一次到 master 就好了。但这样子每次更新本地代码后，都需要俩个步骤：1，hexo deploy \b将打包好的代码部署到 gh-pages；2，git 提交源代码到 master。<br>那可不可以把这俩步\b合并一下呢？答案是\b\b可以的。</p>\n<h4 id=\"添加-Travis-CI-持续集成服务\"><a href=\"#添加-Travis-CI-持续集成服务\" class=\"headerlink\" title=\"添加 Travis CI \b持续集成服务\"></a>添加 Travis CI \b持续集成服务</h4><blockquote>\n<p>Travis CI 提供的是持续集成服务（Continuous Integration，简称 CI）。它绑定 Github 上面的项目，只要有新的代码，就会自动抓取。然后，提供一个运行环境，执行测试，完成构建，还能部署到服务器。<br>持续集成的好处在于，每次代码的小幅变更，就能看到运行结果，从而不断累积小的变更，而不是在开发周期结束时，一下子合并一大块代码。</p>\n</blockquote>\n<ol>\n<li>访问 <a href=\"https://travis-ci.org/\" target=\"_blank\" rel=\"noopener\">Travis CI 官网</a>，使用 Github 账户登入 Travis CI，点击右上角的个人头像 &gt;&gt; settting。Travis 会列出 Github 上面你的所有仓库，以及你所属于的组织。此时，选择你需要 Travis 帮你构建的仓库，打开仓库旁边的开关。一旦激活了一个仓库，Travis 会监听这个仓库的所有变化。</li>\n<li>github 和 Travis 配置</li>\n</ol>\n<ul>\n<li>进入 <a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">github</a> 首页，点击右上角头像 &gt;&gt; settings &gt;&gt; Developer settings &gt;&gt; Personal access tokens &gt;&gt; 点击 \bGenerate new token 按钮 &gt;&gt; 点击全选 repo选项和 user 选项 &gt;&gt; 点击 Generate token 按钮以生成 Travis 需要的 access token。<br><strong><em>注意：复制下生成的token（只允许看见一次），在Travis那边可以使用</em></strong></li>\n<li>进入 <a href=\"https://travis-ci.org/\" target=\"_blank\" rel=\"noopener\">Travis CI 官网</a>,点击 激活仓库开关 右边的 settings，在 Environment Variables 选项中添加一个变量 HEXO_TOKEN，并将刚刚\b复制的 token 填进去，点击 add 按钮。<br>到此 github 和 Travis 的配置就\b ok 了。</li>\n</ul>\n<ol start=\"3\">\n<li><p>在项目根目录下，创建\b配置文件，并命名为 <font color=\"ff0000\">.travis.yml</font>。一旦代码仓库有新的 Commit，Travis 就会去找这个文件，执行里面的命令。</p>\n</li>\n<li><p>.travis.yml 文件配置</p>\n</li>\n</ol>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">node_js</span></span><br><span class=\"line\"><span class=\"attr\">node_js:</span> <span class=\"string\">stable</span></span><br><span class=\"line\"><span class=\"attr\">cache:</span></span><br><span class=\"line\"><span class=\"attr\">directories:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">node_modules</span></span><br><span class=\"line\"><span class=\"attr\">install:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">npm</span> <span class=\"string\">install</span></span><br><span class=\"line\"><span class=\"attr\">script:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">hexo</span> <span class=\"string\">clean</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">hexo</span> <span class=\"string\">g</span></span><br><span class=\"line\"><span class=\"attr\">after_script:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">clone</span> <span class=\"attr\">https://$&#123;GH_REF&#125;</span> <span class=\"string\">.deploy_git</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">cd</span> <span class=\"string\">.deploy_git</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">checkout</span> <span class=\"string\">gh-pages</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">cd</span> <span class=\"string\">../</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">mv</span> <span class=\"string\">.deploy_git/.git/</span> <span class=\"string\">./public/</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">cd</span> <span class=\"string\">./public</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">user.name</span> <span class=\"string\">\"cssie\"</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">user.email</span> <span class=\"string\">&lt;youremail&gt;</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">.</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"bullet\">-m</span> <span class=\"string\">\"Travis CI Auto Builder at `date +\"</span><span class=\"string\">%Y-%m-%d</span> <span class=\"string\">%H:%M\"`\"</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"bullet\">--force</span> <span class=\"bullet\">--quiet</span> <span class=\"string\">\"https://$&#123;HEXO_TOKEN&#125;@$&#123;GH_REF&#125;\"</span></span><br><span class=\"line\"><span class=\"attr\">branches:</span></span><br><span class=\"line\"><span class=\"attr\">only:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\"><span class=\"attr\">env:</span></span><br><span class=\"line\"><span class=\"attr\">global:</span></span><br><span class=\"line\"><span class=\"attr\">- GH_REF:</span> <span class=\"string\">github.com/cssie/cssieblog.git</span></span><br><span class=\"line\"><span class=\"attr\">notifications:</span></span><br><span class=\"line\"><span class=\"attr\">email:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">&lt;youremail&gt;</span></span><br><span class=\"line\"><span class=\"attr\">on_success:</span> <span class=\"string\">change</span></span><br><span class=\"line\"><span class=\"attr\">on_failure:</span> <span class=\"string\">always</span></span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>git 提交文件到 github 上\b，在 Travis CI 官网\b左边处点击项目，看到以下截图，就说明 Travis CI 已正常运行。这时只要刷新博客地址：<a href=\"https://cssie.github.io/cssieblog/\">https://cssie.github.io/cssieblog/</a> 即可看到页面内容已刷新（一般会有点延迟时间），同时到远程仓库地址 <a href=\"https://github.com/cssie/cssieblog.git\" target=\"_blank\" rel=\"noopener\">https://github.com/cssie/cssieblog.git</a> 处可以看到 master 和 gh-pages 均已更新代码。<br><img src=\"https://img10.360buyimg.com/ling/jfs/t1/7239/38/15203/462920/5c6e693fE4f4a4ad0/8637f24a392cd503.jpg\" alt=\"成功截图\"></li>\n</ol>\n<h2 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h2><p>到这里我们已经完成了一开始的诉求，然而这还远远只是一个开头。通过这个例子我们还可以去拓展很多，譬如如果我们想把博客搭建在自己的服务器上，我们应该如何去配置 Travis ，让其在部署的时候，同时部署到 gh-pages 和自己的服务器。再如目前博客是没有评论功能的，如何去添加评论功能。又如或许我们\b可以在\b打包代码前先检测下代码格式是否正确等等。</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"\b\b参考文章\"></a>\b\b参考文章</h2><p><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">Hexo 官方文档</a><br><a href=\"http://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html\" target=\"_blank\" rel=\"noopener\">持续集成服务 Travis CI 教程</a><br><a href=\"http://www.yanglangjing.com/2018/08/28/travis_ci_auto_deploy_hexo_to_vps/\" target=\"_blank\" rel=\"noopener\">Travis CI 持续部署Hexo博客到GitHub Page和VPS服务器</a><br><a href=\"http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html\" target=\"_blank\" rel=\"noopener\">搭建一个免费的，无限流量的Blog—-github Pages和Jekyll入门</a></p>\n<div id=\"gitalk-container\"></div>","site":{"data":{}},"excerpt":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>前阵子一直在赶项目，写需求，沉淀的东西大多是跟业务相关。团队写需求时一般使用 athena + gitlab CI 自动化生成模板，自动化检测代码格式，自动化打包和自动化部署到服务器，全自动一条龙服务。这对于之前都是单枪匹马的我来说，是套极具诱惑力的流程工具。\b趁着现在没什么需求，我便借着搭建博客的例子来学习如何搭建简易版的自动化构建工具。同时\b搭建好的博客也更督促了自己 2019 年多点沉淀，多点输出，多发博客。</p>","more":"<h2 id=\"从哪里入手\"><a href=\"#从哪里入手\" class=\"headerlink\" title=\"从哪里入手\"></a>从哪里入手</h2><p>作为一个简单的示例，示例所要\b实现的核心功能是 – 当把代码 push 到 github 远程仓库时，自动打包代码并将部署到服务器生成博客。</p>\n<ol>\n<li>申请服务器，寻找博客代码的承载体。<br> 我们新建好一个 github \b远程仓库，并将代码托管到仓库的 gh-pages 分支，之后 github 就会帮我们生成静态网页了。因此我们可以省下申请服务器，申请域名，解析域名，搭建服务器等一系列操作了。这也是为了简化我们的操作，毕竟我们的重心是自动化构建流程。</li>\n<li>利用 hexo 搭建好博客框架</li>\n<li>添加 Travis CI 增加自动化打包和部署功能</li>\n</ol>\n<h2 id=\"实操流程\"><a href=\"#实操流程\" class=\"headerlink\" title=\"实操流程\"></a>实操流程</h2><h3 id=\"1-安装-hexo-cli\"><a href=\"#1-安装-hexo-cli\" class=\"headerlink\" title=\"1. 安装 hexo-cli\"></a>1. 安装 hexo-cli</h3><p><code>npm install -g hexo-cli</code></p>\n<h3 id=\"2-安装完成后，执行以下命令，hexo-将会在指定文件夹中新建所需要的文件\"><a href=\"#2-安装完成后，执行以下命令，hexo-将会在指定文件夹中新建所需要的文件\" class=\"headerlink\" title=\"2. 安装完成后，执行以下命令，hexo 将会在指定文件夹中新建所需要的文件\"></a>2. 安装完成后，执行以下命令，hexo 将会在指定文件夹中新建所需要的文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init &lt;folder&gt;</span><br><span class=\"line\">cd &lt;folder&gt;</span><br><span class=\"line\">git init</span><br><span class=\"line\">git remote add &lt;仓库地址&gt;</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-新建完成后，指定文件夹的目录如下：\"><a href=\"#3-新建完成后，指定文件夹的目录如下：\" class=\"headerlink\" title=\"3. 新建完成后，指定文件夹的目录如下：\"></a>3. 新建完成后，指定文件夹的目录如下：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── _config.yml</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds</span><br><span class=\"line\">├── source</span><br><span class=\"line\">|   └── _posts</span><br><span class=\"line\">└── themes</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-配置\"><a href=\"#4-配置\" class=\"headerlink\" title=\"4. 配置\"></a>4. 配置</h3><p>这里要注意的是 url 处，需要填上生成博客的地址，我的是 <a href=\"https://cssie.github.io/cssieblog\">https://cssie.github.io/cssieblog</a> ，如果是二级地址，在下面的 root 选项处需要填上 /cssieblog/ 。一般情况下，生成博客的地址可以从这个项目的远程仓库地址\b获\b得。</p>\n<p> 例如：</p>\n<p> 我的项目地址：<a href=\"https://github.com/cssie/cssieblog.git\" target=\"_blank\" rel=\"noopener\">https://github.com/cssie/cssieblog.git</a><br> 对应的博客地址：<a href=\"https://cssie.github.io/cssieblog\">https://cssie.github.io/cssieblog</a></p>\n<p> <em>生成的博客地址可以在\b此处查找到：github 远程仓库 &gt;&gt; Settings &gt;&gt; GitHub Pages</em></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># URL</span></span><br><span class=\"line\"><span class=\"comment\">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"attr\">https://cssie.github.io/cssieblog</span></span><br><span class=\"line\"><span class=\"attr\">root:</span> <span class=\"string\">/cssieblog/</span></span><br><span class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">:year/:month/:day/:title/</span></span><br><span class=\"line\"><span class=\"attr\">permalink_defaults:</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"comment\">## 部\b署博客，在 repo 处填写好远程仓库地址，并将 branch 设置成 gh-pages\b 表示代码将发布到此分支上。</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\"><span class=\"attr\">repo:</span> <span class=\"attr\">https://github.com/cssie/cssieblog.git</span></span><br><span class=\"line\"><span class=\"attr\">branch:</span> <span class=\"string\">gh-pages</span> <span class=\"comment\">#published</span></span><br><span class=\"line\"><span class=\"attr\">message:</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5-试运行\"><a href=\"#5-试运行\" class=\"headerlink\" title=\"5. 试运行\"></a>5. 试运行</h3><p>常用的 hexo 命令行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage: hexo &lt;command&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Commands:</span><br><span class=\"line\">clean     清除打包文件\b和缓存</span><br><span class=\"line\">deploy    部署</span><br><span class=\"line\">generate  打包静态资源</span><br><span class=\"line\">init      创建一个新的 hexo 文件夹</span><br></pre></td></tr></table></figure>\n<p>接下来我们执行以下命令进行打包</p>\n<p><code>hexo g / hexo generate</code></p>\n<p>这个过程中有可能会报错，提示某个插件没有安装,如下</p>\n<p><code>ERROR Plugin load failed: hexo-renderer-marked</code></p>\n<p>解决方法：执行以下命令查看哪些插件没有安装成功，之后逐一安装缺失的包即可</p>\n<p><code>npm ls --depth 0</code><br><code>npm install hexo-renderer-marked --save</code></p>\n<p>打包之后\b在发布前，我们需要先安装 hexo-deployer-git, 并确保在 _config.yml 中 deploy 的设置为 type: git</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br><span class=\"line\">...</span><br><span class=\"line\">hexo d / hexo deploy</span><br></pre></td></tr></table></figure>\n<p>至此，搭建服务器就已经大功告成啦。当然，别忘了去远程仓库查看 gh-pages 分支是否已更新代码了。<br><img src=\"https://img14.360buyimg.com/ling/jfs/t1/18594/12/7856/275573/5c6e5d03E9e72a835/7833011da0df6d83.jpg\" alt=\"结果图\"></p>\n<h3 id=\"6-添加自动化部署功能\"><a href=\"#6-添加自动化部署功能\" class=\"headerlink\" title=\"6. 添加自动化部署功能\"></a>6. 添加自动化部署功能</h3><p>\b跟到这一步的小伙伴可能很困惑。远程仓库的 master 主支竟然是空的！其实上面几步我们只是把代码部署到远程仓库的 gh-pages 分支上，并没有\b\b上传主要代码到 master 哦。那自然而然的一种想法是：那我把主代码再 push 一次到 master 就好了。但这样子每次更新本地代码后，都需要俩个步骤：1，hexo deploy \b将打包好的代码部署到 gh-pages；2，git 提交源代码到 master。<br>那可不可以把这俩步\b合并一下呢？答案是\b\b可以的。</p>\n<h4 id=\"添加-Travis-CI-持续集成服务\"><a href=\"#添加-Travis-CI-持续集成服务\" class=\"headerlink\" title=\"添加 Travis CI \b持续集成服务\"></a>添加 Travis CI \b持续集成服务</h4><blockquote>\n<p>Travis CI 提供的是持续集成服务（Continuous Integration，简称 CI）。它绑定 Github 上面的项目，只要有新的代码，就会自动抓取。然后，提供一个运行环境，执行测试，完成构建，还能部署到服务器。<br>持续集成的好处在于，每次代码的小幅变更，就能看到运行结果，从而不断累积小的变更，而不是在开发周期结束时，一下子合并一大块代码。</p>\n</blockquote>\n<ol>\n<li>访问 <a href=\"https://travis-ci.org/\" target=\"_blank\" rel=\"noopener\">Travis CI 官网</a>，使用 Github 账户登入 Travis CI，点击右上角的个人头像 &gt;&gt; settting。Travis 会列出 Github 上面你的所有仓库，以及你所属于的组织。此时，选择你需要 Travis 帮你构建的仓库，打开仓库旁边的开关。一旦激活了一个仓库，Travis 会监听这个仓库的所有变化。</li>\n<li>github 和 Travis 配置</li>\n</ol>\n<ul>\n<li>进入 <a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">github</a> 首页，点击右上角头像 &gt;&gt; settings &gt;&gt; Developer settings &gt;&gt; Personal access tokens &gt;&gt; 点击 \bGenerate new token 按钮 &gt;&gt; 点击全选 repo选项和 user 选项 &gt;&gt; 点击 Generate token 按钮以生成 Travis 需要的 access token。<br><strong><em>注意：复制下生成的token（只允许看见一次），在Travis那边可以使用</em></strong></li>\n<li>进入 <a href=\"https://travis-ci.org/\" target=\"_blank\" rel=\"noopener\">Travis CI 官网</a>,点击 激活仓库开关 右边的 settings，在 Environment Variables 选项中添加一个变量 HEXO_TOKEN，并将刚刚\b复制的 token 填进去，点击 add 按钮。<br>到此 github 和 Travis 的配置就\b ok 了。</li>\n</ul>\n<ol start=\"3\">\n<li><p>在项目根目录下，创建\b配置文件，并命名为 <font color=\"ff0000\">.travis.yml</font>。一旦代码仓库有新的 Commit，Travis 就会去找这个文件，执行里面的命令。</p>\n</li>\n<li><p>.travis.yml 文件配置</p>\n</li>\n</ol>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">node_js</span></span><br><span class=\"line\"><span class=\"attr\">node_js:</span> <span class=\"string\">stable</span></span><br><span class=\"line\"><span class=\"attr\">cache:</span></span><br><span class=\"line\"><span class=\"attr\">directories:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">node_modules</span></span><br><span class=\"line\"><span class=\"attr\">install:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">npm</span> <span class=\"string\">install</span></span><br><span class=\"line\"><span class=\"attr\">script:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">hexo</span> <span class=\"string\">clean</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">hexo</span> <span class=\"string\">g</span></span><br><span class=\"line\"><span class=\"attr\">after_script:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">clone</span> <span class=\"attr\">https://$&#123;GH_REF&#125;</span> <span class=\"string\">.deploy_git</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">cd</span> <span class=\"string\">.deploy_git</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">checkout</span> <span class=\"string\">gh-pages</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">cd</span> <span class=\"string\">../</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">mv</span> <span class=\"string\">.deploy_git/.git/</span> <span class=\"string\">./public/</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">cd</span> <span class=\"string\">./public</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">user.name</span> <span class=\"string\">\"cssie\"</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">user.email</span> <span class=\"string\">&lt;youremail&gt;</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">.</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"bullet\">-m</span> <span class=\"string\">\"Travis CI Auto Builder at `date +\"</span><span class=\"string\">%Y-%m-%d</span> <span class=\"string\">%H:%M\"`\"</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"bullet\">--force</span> <span class=\"bullet\">--quiet</span> <span class=\"string\">\"https://$&#123;HEXO_TOKEN&#125;@$&#123;GH_REF&#125;\"</span></span><br><span class=\"line\"><span class=\"attr\">branches:</span></span><br><span class=\"line\"><span class=\"attr\">only:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\"><span class=\"attr\">env:</span></span><br><span class=\"line\"><span class=\"attr\">global:</span></span><br><span class=\"line\"><span class=\"attr\">- GH_REF:</span> <span class=\"string\">github.com/cssie/cssieblog.git</span></span><br><span class=\"line\"><span class=\"attr\">notifications:</span></span><br><span class=\"line\"><span class=\"attr\">email:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">&lt;youremail&gt;</span></span><br><span class=\"line\"><span class=\"attr\">on_success:</span> <span class=\"string\">change</span></span><br><span class=\"line\"><span class=\"attr\">on_failure:</span> <span class=\"string\">always</span></span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>git 提交文件到 github 上\b，在 Travis CI 官网\b左边处点击项目，看到以下截图，就说明 Travis CI 已正常运行。这时只要刷新博客地址：<a href=\"https://cssie.github.io/cssieblog/\">https://cssie.github.io/cssieblog/</a> 即可看到页面内容已刷新（一般会有点延迟时间），同时到远程仓库地址 <a href=\"https://github.com/cssie/cssieblog.git\" target=\"_blank\" rel=\"noopener\">https://github.com/cssie/cssieblog.git</a> 处可以看到 master 和 gh-pages 均已更新代码。<br><img src=\"https://img10.360buyimg.com/ling/jfs/t1/7239/38/15203/462920/5c6e693fE4f4a4ad0/8637f24a392cd503.jpg\" alt=\"成功截图\"></li>\n</ol>\n<h2 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h2><p>到这里我们已经完成了一开始的诉求，然而这还远远只是一个开头。通过这个例子我们还可以去拓展很多，譬如如果我们想把博客搭建在自己的服务器上，我们应该如何去配置 Travis ，让其在部署的时候，同时部署到 gh-pages 和自己的服务器。再如目前博客是没有评论功能的，如何去添加评论功能。又如或许我们\b可以在\b打包代码前先检测下代码格式是否正确等等。</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"\b\b参考文章\"></a>\b\b参考文章</h2><p><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">Hexo 官方文档</a><br><a href=\"http://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html\" target=\"_blank\" rel=\"noopener\">持续集成服务 Travis CI 教程</a><br><a href=\"http://www.yanglangjing.com/2018/08/28/travis_ci_auto_deploy_hexo_to_vps/\" target=\"_blank\" rel=\"noopener\">Travis CI 持续部署Hexo博客到GitHub Page和VPS服务器</a><br><a href=\"http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html\" target=\"_blank\" rel=\"noopener\">搭建一个免费的，无限流量的Blog—-github Pages和Jekyll入门</a></p>\n<div id=\"gitalk-container\"></div>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjsfpe86100002a87h4kcmlv4","category_id":"cjsfpe86700022a87vtxn166h","_id":"cjsfpe86b00062a87uc1m3ici"},{"post_id":"cjsfpe86500012a870jek9ofc","category_id":"cjsfpe86a00042a87oi5c95i2","_id":"cjsfpe86c000a2a87zzsn2s4x"}],"PostTag":[{"post_id":"cjsfpe86100002a87h4kcmlv4","tag_id":"cjsfpe86900032a87qcphsehf","_id":"cjsfpe86c00082a87futqd4e0"},{"post_id":"cjsfpe86100002a87h4kcmlv4","tag_id":"cjsfpe86a00052a87c66aceya","_id":"cjsfpe86c00092a87c8qv4mz8"},{"post_id":"cjsfpe86500012a870jek9ofc","tag_id":"cjsfpe86b00072a87ksvb3vhx","_id":"cjsfpe86d000c2a87ucgox1td"},{"post_id":"cjsfpe86500012a870jek9ofc","tag_id":"cjsfpe86c000b2a879d5enrpg","_id":"cjsfpe86d000d2a87ylo3whqi"}],"Tag":[{"name":"test","_id":"cjsfpe86900032a87qcphsehf"},{"name":"博客","_id":"cjsfpe86a00052a87c66aceya"},{"name":"前端","_id":"cjsfpe86b00072a87ksvb3vhx"},{"name":"自动化构建","_id":"cjsfpe86c000b2a879d5enrpg"}]}}